/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as PathlessLayoutIndexImport } from './routes/_pathlessLayout/index'
import { Route as PathlessLayoutBandsImport } from './routes/_pathlessLayout/bands'
import { Route as PathlessLayoutBandsCreateImport } from './routes/_pathlessLayout/bands/create'

// Create/Update Routes

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutIndexRoute = PathlessLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const PathlessLayoutBandsRoute = PathlessLayoutBandsImport.update({
  id: '/bands',
  path: '/bands',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const PathlessLayoutBandsCreateRoute = PathlessLayoutBandsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => PathlessLayoutBandsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/bands': {
      id: '/_pathlessLayout/bands'
      path: '/bands'
      fullPath: '/bands'
      preLoaderRoute: typeof PathlessLayoutBandsImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/bands/create': {
      id: '/_pathlessLayout/bands/create'
      path: '/create'
      fullPath: '/bands/create'
      preLoaderRoute: typeof PathlessLayoutBandsCreateImport
      parentRoute: typeof PathlessLayoutBandsImport
    }
  }
}

// Create and export the route tree

interface PathlessLayoutBandsRouteChildren {
  PathlessLayoutBandsCreateRoute: typeof PathlessLayoutBandsCreateRoute
}

const PathlessLayoutBandsRouteChildren: PathlessLayoutBandsRouteChildren = {
  PathlessLayoutBandsCreateRoute: PathlessLayoutBandsCreateRoute,
}

const PathlessLayoutBandsRouteWithChildren =
  PathlessLayoutBandsRoute._addFileChildren(PathlessLayoutBandsRouteChildren)

interface PathlessLayoutRouteChildren {
  PathlessLayoutBandsRoute: typeof PathlessLayoutBandsRouteWithChildren
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutBandsRoute: PathlessLayoutBandsRouteWithChildren,
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PathlessLayoutRouteWithChildren
  '/bands': typeof PathlessLayoutBandsRouteWithChildren
  '/': typeof PathlessLayoutIndexRoute
  '/bands/create': typeof PathlessLayoutBandsCreateRoute
}

export interface FileRoutesByTo {
  '/bands': typeof PathlessLayoutBandsRouteWithChildren
  '/': typeof PathlessLayoutIndexRoute
  '/bands/create': typeof PathlessLayoutBandsCreateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/_pathlessLayout/bands': typeof PathlessLayoutBandsRouteWithChildren
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
  '/_pathlessLayout/bands/create': typeof PathlessLayoutBandsCreateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/bands' | '/' | '/bands/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/bands' | '/' | '/bands/create'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/_pathlessLayout/bands'
    | '/_pathlessLayout/'
    | '/_pathlessLayout/bands/create'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_pathlessLayout"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/bands",
        "/_pathlessLayout/"
      ]
    },
    "/_pathlessLayout/bands": {
      "filePath": "_pathlessLayout/bands.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/bands/create"
      ]
    },
    "/_pathlessLayout/": {
      "filePath": "_pathlessLayout/index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/bands/create": {
      "filePath": "_pathlessLayout/bands/create.tsx",
      "parent": "/_pathlessLayout/bands"
    }
  }
}
ROUTE_MANIFEST_END */
